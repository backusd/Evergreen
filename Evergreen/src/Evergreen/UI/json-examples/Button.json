{
	// Basics:	Declare a button control by specifying the name of the control and specify the Type as a derived Button class
	//					See example below for available attributes
	"CustomButtonClassName": {
		"Type": "CustomButtonClassName", // The Type of the Button must be the name of a class that derives from Button
		//                                  Use the macro BUTTON(CustomButtonClassName) to create a derived Button class

		"id": 22, // Unique integer associated with this control
		"Row": 0, // Row/Column: 0-indexed value specifying which Row/Column the control belongs to
		"Column": 1,
		"RowSpan": 1, // RowSpan/ColumnSpan: Number of Rows/Columns the control is to occupy
		"ColumnSpan": 2,
		"Margin": [ 5, 5, 5, 5 ], // Specify margin in order: left/top/right/bottom
		"BackgroundBrush": "Black", // Background color - See Brushes.json for details on using a color brush
		"BorderBrush": "Yellow", // (optional) Border color - See Brushes.json for details on using a color brush
		"BorderWidth": [ 1.0, 1.0, 1.0, 0.0 ], // (optional) Border width [left, top, right, bottom] - default will be 0. 
		//																									 Value can also be a single float that would get applied to all sides

		// Border Offsets: If you want to draw a border around a button, but have it not completely span the length of an edge
		//                 you can assign an offset so the border will stop short of the intended corner
		"BorderTopLeftOffsetX": 5.0, // All offset DEFAULT values will be 0
		"BorderTopLeftOffsetY": 5.0,
		"BorderTopRightOffsetX": 5.0,
		"BorderTopRightOffsetY": 5.0,
		"BorderBottomLeftOffsetX": 5.0,
		"BorderBottomLeftOffsetY": 5.0,
		"BorderBottomRightOffsetX": 5.0,
		"BorderBottomRightOffsetY": 5.0,

		// Corner Radius
		// - You should either use 'CornerRadius' OR 'CornerRadiusX' and 'CornerRadiusY'
		"CornerRadius": 10.0, // (optional) Set BOTH the X and Y corner radius values to the same value. Default will be 0 (non-rounded corners)
		// OR
		"CornerRadiusX": 15.0,
		"CornerRadiusY": 25.0,

		// Button Content: Must be a json object with the 'Type' key having a value of either 'Text' or 'Layout'
		//                 If the value is 'Text', the button will contain a single Text control (See Text.json for how to specify Text attributes)
		//                 If the value is 'Layout', the button will contain a single Layout that can house any number of different controls (See Layout.json for how to specify a Layout)
		"Content": {
			"Type": "Text",
			"Text": "Test Button 1",
			"Brush": "White",
			"FontFamily": "Arial",
			"FontSize": 12
		},

		// OnUpdate callback: Every control has access to setting a custom OnUpdate callback that gets called once every frame
		//										The value must be a string and exist as a key in JSONLoaders::m_onUpdateCallbacksMap, which can
		//                    be done by calling JSONLoaders::AddOnUpdateCallback()
		"OnUpdate": "TestButtonOnUpdate"

		// Event Callbacks
		// The Button class has the following virtual methods that can be overridden to handle events:
		//
		// virtual void HandleOnMouseEntered(Evergreen::MouseMoveEvent&);
		// virtual void HandleOnMouseExited(Evergreen::MouseMoveEvent&);
		// virtual void HandleOnMouseMove(Evergreen::MouseMoveEvent&);
		// virtual void HandleOnMouseLButtonDown(Evergreen::MouseButtonPressedEvent&);
		// virtual void HandleOnMouseLButtonUp(Evergreen::MouseButtonReleasedEvent&);
		// virtual void HandleOnClick(Evergreen::MouseButtonReleasedEvent&);
		//
		// To implement a custom Button, use the macro:
		//
		//     BUTTON(custom_name);
		//
		// and override the virtual methods above.
	},


	// Example Content being a 'Layout'
	"ButtonName2": {
		"Type": "Button",
		...

		// Button Content: If the value is 'Layout', the button will contain a single Layout that can house any number of different controls (See Layout.json for how to specify a Layout)
		"Content": {
			"Type": "Layout",
			...
		}
	}
}