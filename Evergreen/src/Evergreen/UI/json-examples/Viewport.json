{
	// Basics:	Declare a Viewport control by specifying the name of the control and specify the Type as a derived Viewport class
	//					See example below for available attributes
	"CustomViewportClassName": {
		"Type": "CustomViewportClassName", // The Type of the Viewport must be the name of a class that derives from Viewport
		//                                    Use the macro VIEWPORT(CustomViewportClassName) to create a derived Viewport class

		"id": 12, // (optional) Unique integer associated with this control
		"Margin": [ 0, 0, 0, 0 ], // (optional) Specify margin in order: left/top/right/bottom
		"Row": 0, // (optional) Row/Column: 0-indexed value specifying which Row/Column the control belongs to
		"Column": 0,
		"RowSpan": 1, // (optional) RowSpan/ColumnSpan: Number of Rows/Columns the control is to occupy
		"ColumnSpan": 1,

		// OnUpdate callback: Every control has access to setting a custom OnUpdate callback that gets called once every frame
		//										The value must be a string and exist as a key in JSONLoaders::m_onUpdateCallbacksMap, which can
		//                    be done by calling JSONLoaders::AddOnUpdateCallback()
		"OnUpdate": "ViewportExample_OnUpdate",

		// Content: Must be a json object with the 'Type' key having the value 'Layout' (See Layout.json for how to specify a Layout)
		//          The Layout can house any number of different controls that will be rendered ON TOP OF the 3D scene rendered to the Viewport
		"Content": {
			"Type": "Layout",
			"RowDefinitions": [ { "Height": "1*" } ],
			"ColumnDefinitions": [ { "Width": "1*" } ],
			"..."
		}

		// Event Callbacks
		// The Viewport class has the following virtual methods that can be overridden to handle events:
		//
		// virtual void HandleOnChar(CharEvent&) {}
		// virtual void HandleOnKeyPressed(KeyPressedEvent&) {}
		// virtual void HandleOnKeyReleased(KeyReleasedEvent&) {}
		// virtual void HandleOnMouseEntered(MouseMoveEvent&) {}
		// virtual void HandleOnMouseExited(MouseMoveEvent&) {}
		// virtual void HandleOnMouseMove(MouseMoveEvent&) {}
		// virtual void HandleOnMouseScrolledVertical(MouseScrolledEvent&) {}
		// virtual void HandleOnMouseScrolledHorizontal(MouseScrolledEvent&) {}
		// virtual void HandleOnMouseButtonPressed(MouseButtonPressedEvent&) {}
		// virtual void HandleOnMouseButtonReleased(MouseButtonReleasedEvent&) {}
		// virtual void HandleOnClick(MouseButtonReleasedEvent&) {}
		// virtual void HandleOnDoubleClick(MouseButtonDoubleClickEvent&) {}
		// virtual void HandleOnSizeChanged(float width, float height) {}
		//
		// To implement a custom Viewport, use the macro:
		//
		//     VIEWPORT(custom_name);
		//
		// and override the virtual methods above.
	}
}