{
	// Basics:	Declare a RadioButton control by specifying the name of the control and specify the Type as a derived RadioButton class
	//					See example below for available attributes
	"CustomRadioButtonClass": {
		"Type": "CustomRadioButtonClass", // The Type of the RadioButton must be the name of a class that derives from RadioButton
		//                                  Use the macro RADIOBUTTON(CustomRadioButtonClass) to create a derived RadioButton class

		"id": 223, // (optional) Unique integer associated with this control
		"Margin": [ 0, 0, 0, 0 ], // (optional) Specify margin in order: left/top/right/bottom
		"Row": 0, // (optional) Row/Column: 0-indexed value specifying which Row/Column the control belongs to
		"Column": 0,
		"RowSpan": 1, // (optional) RowSpan/ColumnSpan: Number of Rows/Columns the control is to occupy
		"ColumnSpan": 1,

		"IsChecked": false, // (optional) Boolean for whether the RadioButton is checked - Default is false

		"InnerRadius": 3, // (optional) Radius for the inner circle that will appear when the RadioButton is checked - Default is 3
		"OuterRadius": 6, // (optional) Radius for the outer circle that will always be visible - Default is 6

		"InnerBrush": "Purple", // (optional) Inner circle color - See Brushes.json for details on using a color brush
		"OuterBrush": "Purple", // (optional) Outer circle color - See Brushes.json for details on using a color brush
		"OuterBrushLineWidth": 1.5, // (optional) Line width for the outer circle - Default is 1.5

		// OnUpdate callback: Every control has access to setting a custom OnUpdate callback that gets called once every frame
		//										The value must be a string and exist as a key in JSONLoaders::m_onUpdateCallbacksMap, which can
		//                    be done by calling JSONLoaders::AddOnUpdateCallback()
		"OnUpdate": "RadioButtonExample_OnUpdate"

		// Event Callbacks
		// The RadioButton class has the following virtual methods that can be overridden to handle events:
		//
	  // virtual void HandleOnMouseEntered(MouseMoveEvent&)
	  // virtual void HandleOnMouseExited(MouseMoveEvent&)
	  // virtual void HandleOnMouseMove(MouseMoveEvent&)
	  // virtual void HandleOnMouseLButtonDown(MouseButtonPressedEvent&)
	  // virtual void HandleOnMouseLButtonUp(MouseButtonReleasedEvent&)
	  // virtual void HandleOnIsCheckedChanged(RadioButtonIsCheckedChangedEvent&)
		//
		// To implement a custom RadioButton, use the macro:
		//
		//     RADIOBUTTON(custom_name);
		//
		// and override the virtual methods above.
	}
}