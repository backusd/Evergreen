{
	// Basics:	Declare a TextInput control by specifying the name of the control and specify the Type as a derived TextInput class
	//					See example below for available attributes
	"CustomTextInputClassName": {
		"Type": "CustomTextInputClassName", // The Type of the TextInput must be the name of a class that derives from TextInput
		//                                     Use the macro TEXTINPUT(CustomTextInputClassName) to create a derived TextInput class

		"Row": 0, // Row/Column: 0-indexed value specifying which Row/Column the control belongs to
		"Column": 1,
		"RowSpan": 1, // RowSpan/ColumnSpan: Number of Rows/Columns the control is to occupy
		"ColumnSpan": 2,
		"Margin": [ 5, 5, 5, 5 ], // Specify margin in order: left/top/right/bottom
		"BackgroundBrush": "Black", // Background color - See Brushes.json for details on using a color brush
		"BorderBrush": "Yellow", // (optional) Border color - See Brushes.json for details on using a color brush
		"BorderWidth": 3.0, // (optional) Border width - default will be 0

		// Input Text: The following two parameters are REQUIRED
		"InputTextBrush": "Pink", // input text brush - See Brushes.json for details on using a color brush
		"InputTextStyle": { // input text style - See Text.json for available text style attributes
			"FontFamily": "Calibri",
			"..."
		},

		// Placeholder Text: Text that will be displayed when there is 0 input text and the control is not actively selected
		//									 NOTE: Specifying placeholder text is OPTIONAL, but if specified, all three of the following keys MUST be present
		"PlaceholderText": "Input Text Here", // (optional) string to be displayed for placeholder text
		"PlaceholderTextBrush": "LightGray", // (optional) placeholder text brush - See Brushes.json for details on using a color brush
		"PlaceholderTextStyle": { // (optional) placeholder text style - See Text.json for available text style attributes
			"FontFamily": "Calibri",
			"..."
		},

		// Vertical Bar attributes: The vertical bar is the bar that shows where the next input character will be placed
		"VerticalBarBrush": "Black", // (optional) vertical bar brush - See Brushes.json for details on using a color brush
		"VerticalBarWidth": 2.0, // (optional) vertical bar width - Should be >= 0

		// OnUpdate callback: Every control has access to setting a custom OnUpdate callback that gets called once every frame
		//										The value must be a string and exist as a key in JSONLoaders::m_onUpdateCallbacksMap, which can
		//                    be done by calling JSONLoaders::AddOnUpdateCallback()
		"OnUpdate": "TextInput_OnUpdate",

		// Right Side Layout: If the user wishes, a layout can be inserted into the control that will reside immediately
		//                    to the right of the text input area. This is achieved by created a second column within the
		//                    contol's layout and creating a sublayout within row 0 column 1. The user can place whatever
		//                    they want within this sublayout.
		//                    NOTE: When creating a right side layout, BOTH of the following keys MUST be specified
		"RightSideLayoutColumnWidth": 50, // (optional) right side layout width - Can be FIXED, PERCENT, or STAR. The same rules to this field as for the Height/Width field for Row/Column specification. See Layout.json for details.
		"RightSideLayout": { // (optional) right side layout - This is implicitly treated as if there exists a 'Type': 'Layout' key-value pair entry. See Layout.json for specifying layouts.
			"SearchIcon": {
				"Type": "Text",
				"Text": "0xE721",
				"Brush": "Black",
				"FontFamily": "Segoe MDL2 Assets",
				"..."
			}
		}

		// Event Callbacks
		// The TextInput class has the following virtual methods that can be overridden to handle events:
		//
		// virtual void HandleOnMouseEntered(MouseMoveEvent&) {}
		// virtual void HandleOnMouseExited(MouseMoveEvent&) {}
		// virtual void HandleOnMouseMove(MouseMoveEvent&) {}
		// virtual void HandleOnMouseLButtonDown(MouseButtonPressedEvent&) {}
		// virtual void HandleOnMouseLButtonUp(MouseButtonReleasedEvent&) {}
		// virtual void HandleOnClick(MouseButtonReleasedEvent&) {}
		// virtual void HandleOnEnterKey(CharEvent&) {}
		// virtual void HandleOnInputTextChanged(CharEvent&) {}
		//
		// To implement a custom TextInput, use the macro:
		//
		//     TEXTINPUT(custom_name);
		//
		// and override the virtual methods above.
	}
}